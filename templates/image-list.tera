{% import "components/breadcrumb.tera" as breadcrumb %} {% import
"components/file-tree.tera" as tree %} {% import "components/image-card.tera" as
card %} {% extends "layout.tera" %} {% block variables %} {% set title =
"All Images" %} {% endblock variables %} {% block body %}
{{ breadcrumb::breadcrumb(dir_trail=[]) }}

<h1 class="card-title text-3xl text-left ml-8">All Images</h1>

<form method="POST" enctype="application/x-www-form-urlencoded" class="p-4">
  <div class="card p-4 mb-4">
    <div class="flex items-center space-x-4">
      <input
        id="image-selection-checkbox"
        type="checkbox"
        class="checkbox checkbox-primary ml-2"
        autocomplete="off"
        onchange="checkMaster()"
      />
      <div class="divider divider-horizontal"></div>
      <button
        class="image-selection-action btn btn-outline btn-ghost"
        type="button"
        onclick="move_images_modal.showModal()"
        disabled
      >
        Move
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          class="size-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5"
          />
        </svg>
      </button>
      <button
        class="image-selection-action btn btn-error"
        type="submit"
        formaction="/img/delete"
        disabled
      >
        Delete
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          class="size-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
          />
        </svg>
      </button>
    </div>
  </div>

  <div
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4 space-y-4"
  >
    {% for image in images %}
    {{ card::image_card(image=image, onclickCheckbox="checkCheckbox(event)") }}
    {% endfor %}
  </div>

  <dialog id="move_images_modal" class="modal">
    <div class="modal-box">
      <h3 class="text-lg font-bold text-center">Move images to directory</h3>
      <div class="modal-action flex-col gap-4 space-x-0">
        <div class="max-h-96 overflow-y-auto p-4">
          {{ tree::file_tree(dir_tree=dir_tree) }}
        </div>
        <button
          type="submit"
          class="btn"
          formaction="/img/move"
        >
          Submit
        </button>
      </div>
    </div>
    <div class="modal-backdrop">
      <button onclick="move_images_modal.close()" type="button">close</button>
    </div>
  </dialog>
</form>

<script>
  let lastCheckedImageCardCheckbox = null;
  const masterCheck = document.querySelector("#image-selection-checkbox");
  const checkboxes = Array.from(
    document.querySelectorAll(".image-card-checkbox")
  );
  const actionButtons = Array.from(
    document.querySelectorAll(".image-selection-action")
  );

  const checkMaster = () => {
    if (masterCheck.checked) {
      checkboxes.forEach((checkbox) => (checkbox.checked = true));
      actionButtons.forEach((button) => (button.disabled = false));
    } else {
      checkboxes.forEach((checkbox) => (checkbox.checked = false));
      actionButtons.forEach((button) => (button.disabled = true));
    }
  };

  const checkCheckbox = (event) => {
    const lastChecked = lastCheckedImageCardCheckbox;
    if (event.target.checked) {
      if (event.shiftKey && lastChecked && lastChecked.checked) {
        const start = checkboxes.indexOf(event.target);
        const end = checkboxes.indexOf(lastChecked);

        checkboxes
          .slice(Math.min(start, end) + 1, Math.max(start, end))
          .forEach((checkbox) => (checkbox.checked = lastChecked.checked));
      }
      lastCheckedImageCardCheckbox = event.target;
    } else {
      lastCheckedImageCardCheckbox == null;
    }
    if (checkboxes.every((v) => v.checked)) {
      masterCheck.indeterminate = false;
      masterCheck.checked = true;
      actionButtons.forEach((button) => (button.disabled = false));
    } else if (checkboxes.every((v) => !v.checked)) {
      masterCheck.indeterminate = false;
      masterCheck.checked = false;
      actionButtons.forEach((button) => (button.disabled = true));
    } else {
      masterCheck.indeterminate = true;
      actionButtons.forEach((button) => (button.disabled = false));
    }
  };
</script>

{% endblock body %}
